#!/bin/bash

# Pokémon Data Summary Report Script
# Reads JSON files and generates CSV report with statistics

# Configuration
DATA_DIR="pokemon_data"
OUTPUT_CSV="pokemon_report.csv"
TEMP_DATA="temp_pokemon_data.txt"

# Check if pokemon data directory exists
if [ ! -d "$DATA_DIR" ]; then
    echo "Error: $DATA_DIR directory not found!"
    echo "Please run the batch processing script first to generate Pokémon data."
    exit 1
fi

# Check if there are JSON files in the directory
if [ ! "$(ls -A $DATA_DIR/*.json 2>/dev/null)" ]; then
    echo "Error: No JSON files found in $DATA_DIR/"
    echo "Please run the batch processing script first to generate Pokémon data."
    exit 1
fi

# Function to extract data from a single JSON file
extract_pokemon_data() {
    local json_file="$1"

    # Extract name, height (convert decimeters to meters), weight (convert hectograms to kg)
    jq -r '"\(.name),\(.height / 10),\(.weight / 10)"' "$json_file" 2>/dev/null
}

# Function to capitalize first letter of Pokemon name
capitalize_name() {
    echo "$1" | sed 's/^./\U&/'
}

# Create CSV header
echo "Name,Height (m),Weight (kg)" > "$OUTPUT_CSV"

# Create temporary file to store data for calculations
> "$TEMP_DATA"

# Process each JSON file
echo "Processing Pokémon data files..."
for json_file in "$DATA_DIR"/*.json; do
    if [ -f "$json_file" ]; then
        data=$(extract_pokemon_data "$json_file")
        if [ -n "$data" ]; then
            # Extract components and capitalize name
            name=$(echo "$data" | cut -d',' -f1)
            height=$(echo "$data" | cut -d',' -f2)
            weight=$(echo "$data" | cut -d',' -f3)

            # Capitalize the name
            capitalized_name=$(capitalize_name "$name")

            # Write to CSV
            echo "$capitalized_name,$height,$weight" >> "$OUTPUT_CSV"

            # Store numeric data for calculations
            echo "$height $weight" >> "$TEMP_DATA"
        fi
    fi
done

# Check if we have data
if [ ! -s "$TEMP_DATA" ]; then
    echo "Error: No valid Pokémon data could be extracted!"
    rm -f "$TEMP_DATA"
    exit 1
fi

# Calculate averages using awk
echo ""
echo "CSV Report generated at: $OUTPUT_CSV"
echo ""

# Display the CSV content
cat "$OUTPUT_CSV"
echo ""

# Calculate and display averages
awk '
BEGIN {
    height_sum = 0
    weight_sum = 0
    count = 0
}
{
    height_sum += $1
    weight_sum += $2
    count++
}
END {
    if (count > 0) {
        avg_height = height_sum / count
        avg_weight = weight_sum / count
        printf "Average Height: %.2f m\n", avg_height
        printf "Average Weight: %.2f kg\n", avg_weight
    }
}' "$TEMP_DATA"

# Clean up temporary file
rm -f "$TEMP_DATA"

echo ""
echo "Report generation complete!"
