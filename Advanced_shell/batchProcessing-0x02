#!/bin/bash

# Batch Pokémon Data Retrieval Script
# Fetches data for multiple Pokémon and saves each to separate files

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
API_BASE="https://pokeapi.co/api/v2/pokemon"

# Directory to store Pokémon data
DATA_DIR="pokemon_data"

# Create the data directory if it doesn't exist
if [ ! -d "$DATA_DIR" ]; then
    mkdir -p "$DATA_DIR"
fi

# Function to fetch Pokémon data
fetch_pokemon() {
    local pokemon_name="$1"
    local api_url="${API_BASE}/${pokemon_name}"
    local output_file="${DATA_DIR}/${pokemon_name}.json"

    echo "Fetching data for ${pokemon_name}..."

    # Use curl to fetch data with error handling
    if curl -s -f "$api_url" -o "$output_file"; then
        echo "Saved data to ${output_file} ✅"
    else
        echo "❌ Failed to fetch data for ${pokemon_name}"
        # Remove the empty file if curl failed
        [ -f "$output_file" ] && rm "$output_file"
        return 1
    fi

    return 0
}

# Main execution
echo "Starting batch Pokémon data retrieval..."
echo "Target directory: $DATA_DIR"
echo "----------------------------------------"

# Counter for successful downloads
successful_downloads=0
total_pokemon=${#POKEMON_LIST[@]}

# Loop through the Pokémon list
for pokemon in "${POKEMON_LIST[@]}"; do
    if fetch_pokemon "$pokemon"; then
        ((successful_downloads++))
    fi

    # Add a small delay to avoid rate limiting (1 second)
    sleep 1
done

echo "----------------------------------------"
echo "Batch processing complete!"
echo "Successfully downloaded: $successful_downloads/$total_pokemon Pokémon"

# Display directory contents
if [ -d "$DATA_DIR" ] && [ "$(ls -A $DATA_DIR 2>/dev/null)" ]; then
    echo ""
    echo "Files created in $DATA_DIR:"
    ls -la "$DATA_DIR"/*.json 2>/dev/null | awk '{print "  " $9 " (" $5 " bytes)"}'
fi
